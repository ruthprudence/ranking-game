import React, { useState } from 'react';

const MAXCHOICES = 13;

const PrioritySorter = () => {
  const [rows, setRows] = useState(['rock', 'paper', 'scissors']);
  const [currentPair, setCurrentPair] = useState(null);
  const [scores, setScores] = useState({});
  const [sortedChoices, setSortedChoices] = useState([]);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isComparisonComplete, setIsComparisonComplete] = useState(false);

  const addRow = () => {
    if (rows.length < MAXCHOICES) {
      setRows([...rows, '']);
    }
  };

  const removeRow = (index) => {
    if (rows.length > 3) {
      const newRows = [...rows];
      newRows.splice(index, 1);
      setRows(newRows);
    }
  };

  const updateRow = (index, value) => {
    const newRows = [...rows];
    newRows[index] = value;
    setRows(newRows);
  };

  const handleSubmit = () => {
    setIsSubmitted(true);
    setCurrentPair([0, 1]);
    setScores(rows.reduce((acc, choice) => ({ ...acc, [choice]: 0 }), {}));
  };

  const handleChoiceSelection = (selectedChoice) => {
    setScores({ ...scores, [selectedChoice]: scores[selectedChoice] + 1 });

    if (currentPair[1] < rows.length - 1) {
      setCurrentPair([currentPair[0], currentPair[1] + 1]);
    } else if (currentPair[0] < rows.length - 2) {
      setCurrentPair([currentPair[0] + 1, currentPair[0] + 2]);
    } else {
      setSortedChoices(Object.entries(scores).sort((a, b) => b[1] - a[1]).map(entry => entry[0]));
      setIsSubmitted(false);
      setIsComparisonComplete(true);
    }
  };

  return (
    <div>
      {!isSubmitted && !isComparisonComplete && rows.map((row, index) => (
        <div key={index}>
          <span>{index + 1}. </span>
          <input
            type='text'
            value={row}
            onChange={(e) => updateRow(index, e.target.value)}
          />
          <button onClick={() => removeRow(index)}>Remove</button>
        </div>
      ))}
      {!isSubmitted && !isComparisonComplete && rows.length < MAXCHOICES - 1 && <button onClick={addRow}>Add</button>}
      {!isSubmitted && !isComparisonComplete && <button onClick={handleSubmit}>Submit</button>}

      {isSubmitted && currentPair[0] < rows.length - 1 && (
        <div>
          <button onClick={() => handleChoiceSelection(rows[currentPair[0]])}>
            {rows[currentPair[0]]}
          </button>
          <button onClick={() => handleChoiceSelection(rows[currentPair[1]])}>
            {rows[currentPair[1]]}
          </button>
        </div>
      )}

      {isComparisonComplete && (
        <table>
          <thead>
            <tr>
              <th>Ranking</th>
              <th>Item</th>
              <th>Score</th>
            </tr>
          </thead>
          <tbody>
            {sortedChoices.map((choice, index) => (
              <tr key={index}>
                <td>{index + 1}</td>
                <td>{choice}</td>
                <td>{scores[choice]}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PrioritySorter;
