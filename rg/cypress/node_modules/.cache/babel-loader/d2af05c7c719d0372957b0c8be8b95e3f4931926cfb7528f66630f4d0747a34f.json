{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// import { pairingLogic } from './pairingLogic';\n\n// export const matchupSlice = createSlice({\n//   name: 'matchup',\n//   initialState: {\n//     currentPairIndex: 0,\n//     isComparisonComplete: false,\n//     pairs: [],\n//   },\n//   reducers: {\n//     startMatchup: (state, action) => {\n//       const items = action.payload;\n//       state.pairs = pairingLogic(items);\n//       console.log(\"Starting matchup with items:\", items);\n//       console.log(\"Generated pairs:\", state.pairs);\n//       state.currentPairIndex = 0;\n//       state.isComparisonComplete = false;\n//     },\n//     nextPair: (state) => {\n//       console.log(\"Current pair index before update:\", state.currentPairIndex);\n//       console.log(\"Pairs:\", state.pairs);\n//       state.currentPairIndex += 1;\n//       console.log(\"Updated current pair index:\", state.currentPairIndex);\n//       console.log(\"New Current Pair:\", state.pairs[state.currentPairIndex]);\n//     },\n//     handleChoiceSelect: (state, action) => {\n//       const { choiceIndex, items } = action.payload;\n\n//       if (state.pairs.length > state.currentPairIndex) {\n//         const currentPair = state.pairs[state.currentPairIndex];\n//         if (currentPair && currentPair.length === 2) {\n//           const selectedItem = items[currentPair[choiceIndex]];\n\n//           if (selectedItem) {\n//             // Assuming that incrementVote can be dispatched from here\n//             incrementVote(selectedItem.id);\n//             state.currentPairIndex += 1;\n//           }\n//         }\n//       }\n\n//       // Check if the comparison is complete\n//       if (state.currentPairIndex >= state.pairs.length) {\n//         state.isComparisonComplete = true;\n//       }\n//     },\n//   },\n// });\n\n// export const { startMatchup, nextPair, handleChoiceSelect } = matchupSlice.actions;\n\n// export default matchupSlice.reducer;","map":{"version":3,"names":[],"sources":["/Users/ruth/Dropbox/Developer/apps/ps/rg/src/features/matchup/matchupSlice.js"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n// import { pairingLogic } from './pairingLogic';\n\n// export const matchupSlice = createSlice({\n//   name: 'matchup',\n//   initialState: {\n//     currentPairIndex: 0,\n//     isComparisonComplete: false,\n//     pairs: [],\n//   },\n//   reducers: {\n//     startMatchup: (state, action) => {\n//       const items = action.payload;\n//       state.pairs = pairingLogic(items);\n//       console.log(\"Starting matchup with items:\", items);\n//       console.log(\"Generated pairs:\", state.pairs);\n//       state.currentPairIndex = 0;\n//       state.isComparisonComplete = false;\n//     },\n//     nextPair: (state) => {\n//       console.log(\"Current pair index before update:\", state.currentPairIndex);\n//       console.log(\"Pairs:\", state.pairs);\n//       state.currentPairIndex += 1;\n//       console.log(\"Updated current pair index:\", state.currentPairIndex);\n//       console.log(\"New Current Pair:\", state.pairs[state.currentPairIndex]);\n//     },\n//     handleChoiceSelect: (state, action) => {\n//       const { choiceIndex, items } = action.payload;\n\n//       if (state.pairs.length > state.currentPairIndex) {\n//         const currentPair = state.pairs[state.currentPairIndex];\n//         if (currentPair && currentPair.length === 2) {\n//           const selectedItem = items[currentPair[choiceIndex]];\n          \n//           if (selectedItem) {\n//             // Assuming that incrementVote can be dispatched from here\n//             incrementVote(selectedItem.id);\n//             state.currentPairIndex += 1;\n//           }\n//         }\n//       }\n\n//       // Check if the comparison is complete\n//       if (state.currentPairIndex >= state.pairs.length) {\n//         state.isComparisonComplete = true;\n//       }\n//     },\n//   },\n// });\n\n// export const { startMatchup, nextPair, handleChoiceSelect } = matchupSlice.actions;\n\n// export default matchupSlice.reducer;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}