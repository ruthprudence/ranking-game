{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export const validateSlice=createSlice({name:'validate',initialState:{isTopicValid:false,areInputsValid:false,topicValidationResult:{isValid:false,message:''},rowsValidationResult:{isValid:false,message:''}},reducers:{validateTopicState:(state,action)=>{const topic=action.payload;const isValid=topic.trim()!=='';state.isTopicValid=isValid;// Update the isTopicValid state directly\nstate.topicValidationResult={isValid,message:isValid?'':'Topic is required.'};},validateRowsState:(state,action)=>{const rows=action.payload;const isValid=rows.every(row=>row.trim()!=='');state.areInputsValid=isValid;// Update the areInputsValid state directly\nstate.rowsValidationResult={isValid,message:isValid?'Items are valid':'All items must be filled in.'};}}});export const{validateTopicState,validateRowsState}=validateSlice.actions;export default validateSlice.reducer;","map":{"version":3,"names":["createSlice","validateSlice","name","initialState","isTopicValid","areInputsValid","topicValidationResult","isValid","message","rowsValidationResult","reducers","validateTopicState","state","action","topic","payload","trim","validateRowsState","rows","every","row","actions","reducer"],"sources":["/Users/ruth/Dropbox/Developer/apps/ps/rg/src/features/validate/validateSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const validateSlice = createSlice({\n  name: 'validate',\n  initialState: {\n    isTopicValid: false,\n    areInputsValid: false,\n    topicValidationResult: { isValid: false, message: '' },\n    rowsValidationResult: { isValid: false, message: '' }\n  },\n  reducers: {\n    validateTopicState: (state, action) => {\n      const topic = action.payload;\n      const isValid = topic.trim() !== '';\n      state.isTopicValid = isValid; // Update the isTopicValid state directly\n      state.topicValidationResult = {\n        isValid,\n        message: isValid ? '' : 'Topic is required.'\n      };\n    },\n    validateRowsState: (state, action) => {\n      const rows = action.payload;\n      const isValid = rows.every(row => row.trim() !== '');\n      state.areInputsValid = isValid; // Update the areInputsValid state directly\n      state.rowsValidationResult = {\n        isValid,\n        message: isValid ? 'Items are valid' : 'All items must be filled in.'\n      };\n    }\n  }\n});\n\nexport const { validateTopicState, validateRowsState } = validateSlice.actions;\nexport default validateSlice.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C,MAAO,MAAM,CAAAC,aAAa,CAAGD,WAAW,CAAC,CACvCE,IAAI,CAAE,UAAU,CAChBC,YAAY,CAAE,CACZC,YAAY,CAAE,KAAK,CACnBC,cAAc,CAAE,KAAK,CACrBC,qBAAqB,CAAE,CAAEC,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,EAAG,CAAC,CACtDC,oBAAoB,CAAE,CAAEF,OAAO,CAAE,KAAK,CAAEC,OAAO,CAAE,EAAG,CACtD,CAAC,CACDE,QAAQ,CAAE,CACRC,kBAAkB,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACrC,KAAM,CAAAC,KAAK,CAAGD,MAAM,CAACE,OAAO,CAC5B,KAAM,CAAAR,OAAO,CAAGO,KAAK,CAACE,IAAI,CAAC,CAAC,GAAK,EAAE,CACnCJ,KAAK,CAACR,YAAY,CAAGG,OAAO,CAAE;AAC9BK,KAAK,CAACN,qBAAqB,CAAG,CAC5BC,OAAO,CACPC,OAAO,CAAED,OAAO,CAAG,EAAE,CAAG,oBAC1B,CAAC,CACH,CAAC,CACDU,iBAAiB,CAAEA,CAACL,KAAK,CAAEC,MAAM,GAAK,CACpC,KAAM,CAAAK,IAAI,CAAGL,MAAM,CAACE,OAAO,CAC3B,KAAM,CAAAR,OAAO,CAAGW,IAAI,CAACC,KAAK,CAACC,GAAG,EAAIA,GAAG,CAACJ,IAAI,CAAC,CAAC,GAAK,EAAE,CAAC,CACpDJ,KAAK,CAACP,cAAc,CAAGE,OAAO,CAAE;AAChCK,KAAK,CAACH,oBAAoB,CAAG,CAC3BF,OAAO,CACPC,OAAO,CAAED,OAAO,CAAG,iBAAiB,CAAG,8BACzC,CAAC,CACH,CACF,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEI,kBAAkB,CAAEM,iBAAkB,CAAC,CAAGhB,aAAa,CAACoB,OAAO,CAC9E,cAAe,CAAApB,aAAa,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}