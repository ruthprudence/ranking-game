{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';// Async thunk for submitting bug report\nexport const submitBugReport=createAsyncThunk('bugs/submitBugReport',async(bugData,_ref)=>{let{rejectWithValue}=_ref;try{// API call to submit bug data\nconst response=await fetch('https://ruthprudence.com/rg/api/bug-report',{method:'POST',body:JSON.stringify(bugData),headers:{'Content-Type':'application/json'}});// Check if the response is ok\nif(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to submit bug report');}// Parse and return the response data\nreturn await response.json();}catch(error){return rejectWithValue(error.message);}});const initialState={description:'',stepsToReproduce:'',contactEmail:'',isSubmitting:false,submitSuccess:false,submitError:null};export const bugSlice=createSlice({name:'bugs',initialState,reducers:{updateDescription:(state,action)=>{state.description=action.payload;},// ... other reducers for updating form fields\nresetBugReportForm:()=>initialState},extraReducers:builder=>{builder.addCase(submitBugReport.pending,state=>{state.isSubmitting=true;}).addCase(submitBugReport.fulfilled,(state,action)=>{state.isSubmitting=false;state.submitSuccess=true;state.submitError=null;state.responseMessage=action.payload.message;// Store success message from response\n}).addCase(submitBugReport.rejected,(state,action)=>{state.isSubmitting=false;state.submitError=action.payload;// Store error message\n});}});export const{updateDescription,resetBugReportForm}=bugSlice.actions;export default bugSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","submitBugReport","bugData","_ref","rejectWithValue","response","fetch","method","body","JSON","stringify","headers","ok","errorData","json","Error","message","error","initialState","description","stepsToReproduce","contactEmail","isSubmitting","submitSuccess","submitError","bugSlice","name","reducers","updateDescription","state","action","payload","resetBugReportForm","extraReducers","builder","addCase","pending","fulfilled","responseMessage","rejected","actions","reducer"],"sources":["/Users/ruth/Dropbox/Developer/apps/ps/rg/src/features/bug/bugSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk for submitting bug report\nexport const submitBugReport = createAsyncThunk(\n    'bugs/submitBugReport',\n    async (bugData, { rejectWithValue }) => {\n        try {\n            // API call to submit bug data\n            const response = await fetch('https://ruthprudence.com/rg/api/bug-report', {\n                method: 'POST',\n                body: JSON.stringify(bugData),\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            // Check if the response is ok\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to submit bug report');\n            }\n\n            // Parse and return the response data\n            return await response.json();\n        } catch (error) {\n            return rejectWithValue(error.message);\n        }\n    }\n);\n\nconst initialState = {\n    description: '',\n    stepsToReproduce: '',\n    contactEmail: '',\n    isSubmitting: false,\n    submitSuccess: false,\n    submitError: null,\n};\n\nexport const bugSlice = createSlice({\n    name: 'bugs',\n    initialState,\n    reducers: {\n        updateDescription: (state, action) => {\n            state.description = action.payload;\n        },\n        // ... other reducers for updating form fields\n        resetBugReportForm: () => initialState,\n    },\n    extraReducers: (builder) => {\n        builder\n            .addCase(submitBugReport.pending, (state) => {\n                state.isSubmitting = true;\n            })\n            .addCase(submitBugReport.fulfilled, (state, action) => {\n                state.isSubmitting = false;\n                state.submitSuccess = true;\n                state.submitError = null;\n                state.responseMessage = action.payload.message; // Store success message from response\n            })\n            .addCase(submitBugReport.rejected, (state, action) => {\n                state.isSubmitting = false;\n                state.submitError = action.payload; // Store error message\n            });\n    },\n});\n\nexport const { updateDescription, resetBugReportForm } = bugSlice.actions;\n\nexport default bugSlice.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAEhE;AACA,MAAO,MAAM,CAAAC,eAAe,CAAGD,gBAAgB,CAC3C,sBAAsB,CACtB,MAAOE,OAAO,CAAAC,IAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CAC/B,GAAI,CACA;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,4CAA4C,CAAE,CACvEC,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,CAC7BS,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CACJ,CAAC,CAAC,CAEF;AACA,GAAI,CAACN,QAAQ,CAACO,EAAE,CAAE,CACd,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,OAAO,EAAI,6BAA6B,CAAC,CACvE,CAEA;AACA,MAAO,MAAM,CAAAX,QAAQ,CAACS,IAAI,CAAC,CAAC,CAChC,CAAE,MAAOG,KAAK,CAAE,CACZ,MAAO,CAAAb,eAAe,CAACa,KAAK,CAACD,OAAO,CAAC,CACzC,CACJ,CACJ,CAAC,CAED,KAAM,CAAAE,YAAY,CAAG,CACjBC,WAAW,CAAE,EAAE,CACfC,gBAAgB,CAAE,EAAE,CACpBC,YAAY,CAAE,EAAE,CAChBC,YAAY,CAAE,KAAK,CACnBC,aAAa,CAAE,KAAK,CACpBC,WAAW,CAAE,IACjB,CAAC,CAED,MAAO,MAAM,CAAAC,QAAQ,CAAG1B,WAAW,CAAC,CAChC2B,IAAI,CAAE,MAAM,CACZR,YAAY,CACZS,QAAQ,CAAE,CACNC,iBAAiB,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CAClCD,KAAK,CAACV,WAAW,CAAGW,MAAM,CAACC,OAAO,CACtC,CAAC,CACD;AACAC,kBAAkB,CAAEA,CAAA,GAAMd,YAC9B,CAAC,CACDe,aAAa,CAAGC,OAAO,EAAK,CACxBA,OAAO,CACFC,OAAO,CAAClC,eAAe,CAACmC,OAAO,CAAGP,KAAK,EAAK,CACzCA,KAAK,CAACP,YAAY,CAAG,IAAI,CAC7B,CAAC,CAAC,CACDa,OAAO,CAAClC,eAAe,CAACoC,SAAS,CAAE,CAACR,KAAK,CAAEC,MAAM,GAAK,CACnDD,KAAK,CAACP,YAAY,CAAG,KAAK,CAC1BO,KAAK,CAACN,aAAa,CAAG,IAAI,CAC1BM,KAAK,CAACL,WAAW,CAAG,IAAI,CACxBK,KAAK,CAACS,eAAe,CAAGR,MAAM,CAACC,OAAO,CAACf,OAAO,CAAE;AACpD,CAAC,CAAC,CACDmB,OAAO,CAAClC,eAAe,CAACsC,QAAQ,CAAE,CAACV,KAAK,CAAEC,MAAM,GAAK,CAClDD,KAAK,CAACP,YAAY,CAAG,KAAK,CAC1BO,KAAK,CAACL,WAAW,CAAGM,MAAM,CAACC,OAAO,CAAE;AACxC,CAAC,CAAC,CACV,CACJ,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEH,iBAAiB,CAAEI,kBAAmB,CAAC,CAAGP,QAAQ,CAACe,OAAO,CAEzE,cAAe,CAAAf,QAAQ,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}