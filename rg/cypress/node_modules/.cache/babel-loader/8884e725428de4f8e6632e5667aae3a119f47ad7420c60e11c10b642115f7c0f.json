{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { pairingLogic } from './pairingLogic';\nexport const matchupSlice = createSlice({\n  name: 'matchup',\n  initialState: {\n    currentPairIndex: 0,\n    isComparisonComplete: false,\n    pairs: []\n  },\n  reducers: {\n    startMatchup: (state, action) => {\n      const items = action.payload;\n      state.pairs = pairingLogic(items);\n      console.log(\"Starting matchup with items:\", items);\n      console.log(\"Generated pairs:\", state.pairs);\n      state.currentPairIndex = 0;\n      state.isComparisonComplete = false;\n    },\n    nextPair: state => {\n      console.log(\"Current pair index before update:\", state.currentPairIndex);\n      console.log(\"Pairs:\", state.pairs);\n      state.currentPairIndex += 1;\n      console.log(\"Updated current pair index:\", state.currentPairIndex);\n      console.log(\"New Current Pair:\", state.pairs[state.currentPairIndex]);\n    },\n    handleChoiceSelect: (state, action) => {\n      const {\n        choiceIndex,\n        items\n      } = action.payload;\n      if (state.pairs.length > state.currentPairIndex) {\n        const currentPair = state.pairs[state.currentPairIndex];\n        if (currentPair && currentPair.length === 2) {\n          const selectedItem = items[currentPair[choiceIndex]];\n          if (selectedItem) {\n            // Assuming that incrementVote can be dispatched from here\n            incrementVote(selectedItem.id);\n            state.currentPairIndex += 1;\n          }\n        }\n      }\n\n      // Check if the comparison is complete\n      if (state.currentPairIndex >= state.pairs.length) {\n        state.isComparisonComplete = true;\n      }\n    }\n  }\n});\nexport const {\n  startMatchup,\n  nextPair,\n  handleChoiceSelect\n} = matchupSlice.actions;\nexport default matchupSlice.reducer;","map":{"version":3,"names":["createSlice","pairingLogic","matchupSlice","name","initialState","currentPairIndex","isComparisonComplete","pairs","reducers","startMatchup","state","action","items","payload","console","log","nextPair","handleChoiceSelect","choiceIndex","length","currentPair","selectedItem","incrementVote","id","actions","reducer"],"sources":["/Users/ruth/Dropbox/Developer/apps/ps/rg/src/features/matchup/matchupSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { pairingLogic } from './pairingLogic';\n\nexport const matchupSlice = createSlice({\n  name: 'matchup',\n  initialState: {\n    currentPairIndex: 0,\n    isComparisonComplete: false,\n    pairs: [],\n  },\n  reducers: {\n    startMatchup: (state, action) => {\n      const items = action.payload;\n      state.pairs = pairingLogic(items);\n      console.log(\"Starting matchup with items:\", items);\n      console.log(\"Generated pairs:\", state.pairs);\n      state.currentPairIndex = 0;\n      state.isComparisonComplete = false;\n    },\n    nextPair: (state) => {\n      console.log(\"Current pair index before update:\", state.currentPairIndex);\n      console.log(\"Pairs:\", state.pairs);\n      state.currentPairIndex += 1;\n      console.log(\"Updated current pair index:\", state.currentPairIndex);\n      console.log(\"New Current Pair:\", state.pairs[state.currentPairIndex]);\n    },\n    handleChoiceSelect: (state, action) => {\n      const { choiceIndex, items } = action.payload;\n\n      if (state.pairs.length > state.currentPairIndex) {\n        const currentPair = state.pairs[state.currentPairIndex];\n        if (currentPair && currentPair.length === 2) {\n          const selectedItem = items[currentPair[choiceIndex]];\n          \n          if (selectedItem) {\n            // Assuming that incrementVote can be dispatched from here\n            incrementVote(selectedItem.id);\n            state.currentPairIndex += 1;\n          }\n        }\n      }\n\n      // Check if the comparison is complete\n      if (state.currentPairIndex >= state.pairs.length) {\n        state.isComparisonComplete = true;\n      }\n    },\n  },\n});\n\nexport const { startMatchup, nextPair, handleChoiceSelect } = matchupSlice.actions;\n\nexport default matchupSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,OAAO,MAAMC,YAAY,GAAGF,WAAW,CAAC;EACtCG,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,gBAAgB,EAAE,CAAC;IACnBC,oBAAoB,EAAE,KAAK;IAC3BC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAMC,KAAK,GAAGD,MAAM,CAACE,OAAO;MAC5BH,KAAK,CAACH,KAAK,GAAGN,YAAY,CAACW,KAAK,CAAC;MACjCE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,KAAK,CAAC;MAClDE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,KAAK,CAACH,KAAK,CAAC;MAC5CG,KAAK,CAACL,gBAAgB,GAAG,CAAC;MAC1BK,KAAK,CAACJ,oBAAoB,GAAG,KAAK;IACpC,CAAC;IACDU,QAAQ,EAAGN,KAAK,IAAK;MACnBI,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEL,KAAK,CAACL,gBAAgB,CAAC;MACxES,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAACH,KAAK,CAAC;MAClCG,KAAK,CAACL,gBAAgB,IAAI,CAAC;MAC3BS,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEL,KAAK,CAACL,gBAAgB,CAAC;MAClES,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,KAAK,CAACH,KAAK,CAACG,KAAK,CAACL,gBAAgB,CAAC,CAAC;IACvE,CAAC;IACDY,kBAAkB,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MACrC,MAAM;QAAEO,WAAW;QAAEN;MAAM,CAAC,GAAGD,MAAM,CAACE,OAAO;MAE7C,IAAIH,KAAK,CAACH,KAAK,CAACY,MAAM,GAAGT,KAAK,CAACL,gBAAgB,EAAE;QAC/C,MAAMe,WAAW,GAAGV,KAAK,CAACH,KAAK,CAACG,KAAK,CAACL,gBAAgB,CAAC;QACvD,IAAIe,WAAW,IAAIA,WAAW,CAACD,MAAM,KAAK,CAAC,EAAE;UAC3C,MAAME,YAAY,GAAGT,KAAK,CAACQ,WAAW,CAACF,WAAW,CAAC,CAAC;UAEpD,IAAIG,YAAY,EAAE;YAChB;YACAC,aAAa,CAACD,YAAY,CAACE,EAAE,CAAC;YAC9Bb,KAAK,CAACL,gBAAgB,IAAI,CAAC;UAC7B;QACF;MACF;;MAEA;MACA,IAAIK,KAAK,CAACL,gBAAgB,IAAIK,KAAK,CAACH,KAAK,CAACY,MAAM,EAAE;QAChDT,KAAK,CAACJ,oBAAoB,GAAG,IAAI;MACnC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,YAAY;EAAEO,QAAQ;EAAEC;AAAmB,CAAC,GAAGf,YAAY,CAACsB,OAAO;AAElF,eAAetB,YAAY,CAACuB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}